
import React, { useState } from 'react';
// FIX: Add file extension to import.
import { generateImageWithImagen } from '../services/geminiService.ts';
import Icon from './Icon';

const AiImageGenerator: React.FC = () => {
    const [prompt, setPrompt] = useState('');
    const [generatedImage, setGeneratedImage] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleGenerate = async () => {
        if (!prompt.trim()) return;
        setIsLoading(true);
        setError(null);
        setGeneratedImage(null);
        try {
            const imageUrl = await generateImageWithImagen(prompt);
            setGeneratedImage(imageUrl);
        } catch (err: any) {
            setError(err.message || "An error occurred while generating the image.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="p-4">
            <h2 className="text-xl font-bold mb-4 text-text-primary">AI Image Generator</h2>
            <div className="flex items-center space-x-2 mb-4">
                <input
                    type="text"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="Describe the image you want to create..."
                    className="w-full bg-secondary border border-border-color rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent"
                    disabled={isLoading}
                />
                <button 
                    onClick={handleGenerate} 
                    disabled={isLoading || !prompt.trim()}
                    className="bg-gradient-to-r from-accent-start to-accent-end text-white px-4 py-2 rounded-md font-semibold hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center w-36"
                >
                    {isLoading ? (
                        <div className="w-5 h-5 border-2 border-white/50 border-t-white rounded-full animate-spin"></div>
                    ) : (
                        <div className="flex items-center space-x-2">
                            <Icon name="Sparkles" className="w-5 h-5" />
                            <span>Generate</span>
                        </div>
                    )}
                </button>
            </div>

            <div className="aspect-square bg-secondary rounded-lg flex items-center justify-center border border-border-color overflow-hidden">
                {isLoading && (
                    <div className="text-center text-text-secondary">
                        <Icon name="Sparkles" className="w-12 h-12 text-accent animate-pulse mx-auto"/>
                        <p className="mt-2 font-semibold">Generating your masterpiece...</p>
                        <p className="text-sm">This may take a moment.</p>
                    </div>
                )}
                {error && <p className="text-red-500">{error}</p>}
                {generatedImage && <img src={generatedImage} alt="Generated by AI" className="w-full h-full object-cover" />}
                {!isLoading && !error && !generatedImage && (
                    <div className="text-center text-text-secondary p-4">
                         <Icon name="Photo" className="w-16 h-16 text-gray-400 dark:text-gray-600 mx-auto"/>
                         <p className="mt-2">Your generated image will appear here.</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AiImageGenerator;
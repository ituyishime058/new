
import { GoogleGenAI, GenerateContentResponse, Modality, Chat } from "@google/genai";

// Ensure the API key is handled by the environment.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

// In-memory chat sessions for demo purposes
const chatSessions: Record<string, Chat> = {};

/**
 * Gets a chat response from the Gemini model.
 */
export const getAiChatResponse = async (conversationId: string, message: string): Promise<string> => {
  // FIX: Use a persistent chat session for each conversation
  if (!chatSessions[conversationId]) {
    chatSessions[conversationId] = ai.chats.create({
      model: 'gemini-2.5-flash',
    });
  }
  
  const chat = chatSessions[conversationId];

  const result = await chat.sendMessage({ message });
  const text = result.text;
  
  return text;
};

/**
 * Generates an image using the Imagen model.
 */
export const generateImageWithImagen = async (prompt: string): Promise<string> => {
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
    });

    const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
    return `data:image/jpeg;base64,${base64ImageBytes}`;
};


/**
 * Edits an image using AI.
 */
export const editImageWithAi = async (base64ImageData: string, mimeType: string, prompt: string): Promise<string> => {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64ImageData,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            // The API returns just the base64 data, so we prepend the data URL scheme.
            return `data:${mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the model.");
};
